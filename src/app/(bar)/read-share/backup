'use client';

import React from 'react';
import { useState, useEffect } from "react";
import BookReview from "@components/read-share/book-review";
import review_test from "@data/review_test.json";

interface review_type {
	id: string;
	title: string;
	isbn: string;
	essay: string;
}

const ReadShare = () => {
	const [page, setPage] = useState<number>(1);
	const [maxPage, setMaxPage] = useState<number>(1);
	const maxKeywordLength = 100;
	const [keywordLength, setKeywordLength] = useState<number>(0);
	const [searchAble, setSearchAble] = useState<boolean>(false);
	const [keyword, setKeyword] = useState<string>('');
	const [reviewData, setReviewData] = useState<{ id: string; title: string; isbn: string; essay: string; }[]>([]);
	const [nextExist, setNextExist] = useState<boolean>(false);
	const [previousExist, setPreviousExist] = useState<boolean>(false);
	const [loading, setLoading] = useState<boolean>(true);


	const loadData = async () => {
		if (process.env.NEXT_PUBLIC_POSTGRES_ENABLE === "false") {
			console.warn('postgres is disabled....')
				setReviewData(review_test as review_type[]);
			return ;
		}
		setLoading(true);
		try {
			(async () => {
			const res = await fetch('/api/get_shohyo', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify({
					page,
					keyword,
				}),
			});
			const reviewJson = await res.json().then((json) => {
				console.error(json.maxPage);
				setMaxPage(json.maxPage);
				return json.data;
			});
			setReviewData(reviewJson);
			console.log(reviewJson);
			})();
		} catch (err) {
			console.error(err);
		};
		setLoading(false);
	};

	const handleOnSearch = async (ev: React.FormEvent<HTMLFormElement>) => {
		ev.preventDefault();
		loadData();
		setSearchAble(false);
	};

	const handleOnChangeKeyword = (
		ev: React.ChangeEvent<HTMLInputElement>
		) => {
		setKeyword(ev.target.value);
		setKeywordLength(ev.target.value.length);
		setSearchAble(true);
	};

	const isPageExist = () => {
		if (page > 1) {
			setPreviousExist(true);
		}
		if (page < maxPage) {
			setNextExist(true);
		}
	}

	const handleOnClickPrevious = () => {
		setPage(page - 1);
		isPageExist();
		loadData();
	}

	const handleOnClickNext = () => {
		setPage(page + 1);
		isPageExist();
		loadData();
	}

	useEffect(() => {
			loadData();
	}, []);

	return (
		/*<div className="flex flex-col pt-4 sm:ml-[120px] md:ml-[250px] sm:border-r sm:border-zinc-700 pb-20 min-h-screen">*/
		/*<label htmlFor="search" className="block text-2xl font-bold text-gray-700 mb-2">検索</label>*/
		<div className="flex flex-col pt-4 ml-4 sm:ml-[120px] md:ml-[280px] pb-0 min-h-screen">
			<span className="px-8 mt-10 font-bold text-3xl">ReadShare</span>
			<form onSubmit={handleOnSearch} className="px-8 py-6 w-full">
				<div className="mb-6">
					<input
					type="text"
					id="search"
					value={keyword}
					maxLength={maxKeywordLength}
					onChange={handleOnChangeKeyword}
					className="w-full h-12 px-4 rounded-md border-gray-300 shadow-sm focus:border-slate-300 focus:ring focus:ring-slate-200 focus:ring-opacity-50"
					/>
				</div>
				<button
				type="submit"
				disabled={!searchAble}
				//className={"w-full py-4 rounded-md text-white text-xl bg-slate-500 hover:bg-slate-600"}
				className={`w-full py-4 rounded-md text-white text-xl ${ searchAble ? 'bg-slate-500 hover:bg-slate-600' : 'bg-gray-300 cursor-not-allowed'}`}
				>
				{keywordLength != 0 ? '本を検索' : '本を検索'}
				</button>
			</form>
			<div className="w-full">
				{ loading ? (
					<div className="flex justify-center">
						<div className="animate-spin mb-10 h-10 w-10 border-4 border-slate-500 rounded-full border-t-transparent"></div>
					</div>
				) : null }
				{reviewData.map((data, index) => (
						<BookReview key={index} shohyo={data} />
				))}
			</div>
			<div className="flex justify-center mt-4">
				<a
					href="#"
					className="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white me-2"
					onClick={handleOnClickPrevious}
				>
					<svg
						className="w-3.5 h-3.5 me-2 rtl:rotate-180"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 14 10"
					>
						<path
							stroke="currentColor"
							strokeLinecap="round"
							strokeLinejoin="round"
							strokeWidth="2"
							d="M13 5H1m0 0 4 4M1 5l4-4"
						/>
					</svg>
					Previous
				</a>
				<a
					href="#"
					className="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
					onClick={handleOnClickNext}
				>
					Next
					<svg
						className="w-3.5 h-3.5 ms-2 rtl:rotate-180"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 14 10"
					>
						<path
							stroke="currentColor"
							strokeLinecap="round"
							strokeLinejoin="round"
							strokeWidth="2"
							d="M1 5h12m0 0L9 1m4 4L9 9"
						/>
					</svg>
				</a>
			</div>
		</div>
	)
}

export default ReadShare;
